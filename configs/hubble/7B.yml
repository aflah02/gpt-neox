{
  # Part 1 (Copied from llama2/7B.yml)
  "pipe_parallel_size": 1,
  "model_parallel_size": 2,
  "make_vocab_size_divisible_by": 1,

  # model settings
  "num_layers": 32,
  "hidden_size": 4096,
  "intermediate_size": 32768,
  "num_attention_heads": 32,
  "seq_length": 2048,
  "max_position_embeddings": 2048,
  "pos_emb": "rotary",
  "rotary_pct": 1,
  "no_weight_tying": true,
  "gpt_j_residual": false,
  "output_layer_parallelism": "column",
  "norm": "rmsnorm",
  "rms_norm_epsilon": 1.0e-5,

  "scaled_upper_triang_masked_softmax_fusion": true,
  "bias_gelu_fusion": false,
  "use_bias_in_norms": false,
  "use_bias_in_attn_linear": false,
  "activation": "swiglu",
  "mlp_multiple_of": 256,

  # Part 2 (Adapted from pythia/6-9B.yml and OLMo 2 Technical Report)
  "attention_config": [[["flash"], 32]],
  "optimizer": {
    "type": "Adam",
    "params": {
      # "lr": 0.00012,
      "betas": [0.9, 0.95],
      "eps": 1.0e-8
    }
  },

  "scheduler": {
    "type": "WarmupCosineLR",
    "params": {
      "warmup_min_lr": 0,
      "warmup_max_lr": 3.0e-4,
      "warmup_num_steps": 2000,
      # "warmup_type": "linear", Asked in AI2 Discord
    }
  },

  "zero_optimization": {
  "stage": 1,
  "allgather_partitions": true,
  "allgather_bucket_size": 1260000000,
  "overlap_comm": true,
  "reduce_scatter": true,
  "reduce_bucket_size": 1260000000,
  "contiguous_gradients": true,
  "cpu_offload": false
  },

  "train_micro_batch_size_per_gpu": 8,
  "gradient_accumulation_steps": 2,
  "data_impl": "mmap",

  "checkpoint_activations": true,
  "checkpoint_num_layers": 1,
  "partition_activations": true,
  "synchronize_each_layer": true,

  "gradient_clipping": 1.0,
  "weight_decay": 0.1,
  "hidden_dropout": 0,
  "attention_dropout": 0,

  "bf16": {
    "bf16": true,
    "enabled": true,
  },

  # "train_iters": 143000, 
  "train_epochs": 1,
  "distributed_backend": "nccl",
  "checkpoint_factor": 1000,
  "extra_save_iters": [0,1,2,4,8,16,32,64,128,256,512],
  "eval_interval": 143000,
  "eval_iters": 10,

  "log_interval": 10,
  "steps_per_print": 10,
  "wall_clock_breakdown": true,

  # "tokenizer_type": "SPMTokenizer",
  # "vocab-file": "codellama/tokenizer.model", # use tokenizer.model from Meta CodeLlama download

  # "save": "/path/to/save/",
  #"load": "", # once run is started, to restart from intermediate ckpt use "load" = "save"
  # "load": "/path/to/converted/codellama_7b_weights_with_mp2",
}
